# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'predizer.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import pickle

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1018, 627)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lb_age = QtWidgets.QLabel(self.centralwidget)
        self.lb_age.setGeometry(QtCore.QRect(80, 140, 121, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lb_age.setFont(font)
        self.lb_age.setObjectName("lb_age")
        self.txt_age = QtWidgets.QLineEdit(self.centralwidget)
        self.txt_age.setGeometry(QtCore.QRect(200, 140, 41, 22))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.txt_age.setFont(font)
        self.txt_age.setObjectName("txt_age")
        self.lb_gender = QtWidgets.QLabel(self.centralwidget)
        self.lb_gender.setGeometry(QtCore.QRect(660, 260, 61, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lb_gender.setFont(font)
        self.lb_gender.setObjectName("lb_gender")
        self.gender_m = QtWidgets.QCheckBox(self.centralwidget)
        self.gender_m.setGeometry(QtCore.QRect(730, 260, 81, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.gender_m.setFont(font)
        self.gender_m.setObjectName("gender_m")
        self.gender_f = QtWidgets.QCheckBox(self.centralwidget)
        self.gender_f.setGeometry(QtCore.QRect(770, 260, 81, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.gender_f.setFont(font)
        self.gender_f.setObjectName("gender_f")
        self.lb_dependent = QtWidgets.QLabel(self.centralwidget)
        self.lb_dependent.setGeometry(QtCore.QRect(80, 170, 141, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lb_dependent.setFont(font)
        self.lb_dependent.setObjectName("lb_dependent")
        self.txt_dependent = QtWidgets.QLineEdit(self.centralwidget)
        self.txt_dependent.setGeometry(QtCore.QRect(220, 170, 41, 22))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.txt_dependent.setFont(font)
        self.txt_dependent.setObjectName("txt_dependent")
        self.lb_level = QtWidgets.QLabel(self.centralwidget)
        self.lb_level.setGeometry(QtCore.QRect(350, 140, 121, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lb_level.setFont(font)
        self.lb_level.setObjectName("lb_level")
        self.txt_level = QtWidgets.QLineEdit(self.centralwidget)
        self.txt_level.setGeometry(QtCore.QRect(480, 140, 151, 22))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.txt_level.setFont(font)
        self.txt_level.setObjectName("txt_level")
        self.lb_marital = QtWidgets.QLabel(self.centralwidget)
        self.lb_marital.setGeometry(QtCore.QRect(350, 170, 111, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lb_marital.setFont(font)
        self.lb_marital.setObjectName("lb_marital")
        self.txt_marital = QtWidgets.QLineEdit(self.centralwidget)
        self.txt_marital.setGeometry(QtCore.QRect(470, 170, 151, 22))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.txt_marital.setFont(font)
        self.txt_marital.setObjectName("txt_marital")
        self.lb_income = QtWidgets.QLabel(self.centralwidget)
        self.lb_income.setGeometry(QtCore.QRect(660, 140, 131, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lb_income.setFont(font)
        self.lb_income.setObjectName("lb_income")
        self.rb_income_1 = QtWidgets.QRadioButton(self.centralwidget)
        self.rb_income_1.setGeometry(QtCore.QRect(810, 140, 141, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.rb_income_1.setFont(font)
        self.rb_income_1.setChecked(True)
        self.rb_income_1.setObjectName("rb_income_1")
        self.rb_income_2 = QtWidgets.QRadioButton(self.centralwidget)
        self.rb_income_2.setGeometry(QtCore.QRect(810, 160, 111, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.rb_income_2.setFont(font)
        self.rb_income_2.setObjectName("rb_income_2")
        self.rb_income_3 = QtWidgets.QRadioButton(self.centralwidget)
        self.rb_income_3.setGeometry(QtCore.QRect(810, 180, 111, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.rb_income_3.setFont(font)
        self.rb_income_3.setObjectName("rb_income_3")
        self.rb_income_4 = QtWidgets.QRadioButton(self.centralwidget)
        self.rb_income_4.setGeometry(QtCore.QRect(810, 200, 111, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.rb_income_4.setFont(font)
        self.rb_income_4.setObjectName("rb_income_4")
        self.rb_income_5 = QtWidgets.QRadioButton(self.centralwidget)
        self.rb_income_5.setGeometry(QtCore.QRect(810, 220, 141, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.rb_income_5.setFont(font)
        self.rb_income_5.setObjectName("rb_income_5")
        self.lb_category = QtWidgets.QLabel(self.centralwidget)
        self.lb_category.setGeometry(QtCore.QRect(350, 200, 121, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lb_category.setFont(font)
        self.lb_category.setObjectName("lb_category")
        self.txt_category = QtWidgets.QLineEdit(self.centralwidget)
        self.txt_category.setGeometry(QtCore.QRect(470, 200, 151, 22))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.txt_category.setFont(font)
        self.txt_category.setObjectName("txt_category")
        self.lb_book = QtWidgets.QLabel(self.centralwidget)
        self.lb_book.setGeometry(QtCore.QRect(80, 200, 131, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lb_book.setFont(font)
        self.lb_book.setObjectName("lb_book")
        self.txt_book = QtWidgets.QLineEdit(self.centralwidget)
        self.txt_book.setGeometry(QtCore.QRect(220, 200, 41, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.txt_book.setFont(font)
        self.txt_book.setObjectName("txt_book")
        self.lb_relationship = QtWidgets.QLabel(self.centralwidget)
        self.lb_relationship.setGeometry(QtCore.QRect(80, 230, 191, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lb_relationship.setFont(font)
        self.lb_relationship.setObjectName("lb_relationship")
        self.txt_relationship = QtWidgets.QLineEdit(self.centralwidget)
        self.txt_relationship.setGeometry(QtCore.QRect(280, 230, 41, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.txt_relationship.setFont(font)
        self.txt_relationship.setObjectName("txt_relationship")
        self.lb_inactive = QtWidgets.QLabel(self.centralwidget)
        self.lb_inactive.setGeometry(QtCore.QRect(80, 260, 201, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lb_inactive.setFont(font)
        self.lb_inactive.setObjectName("lb_inactive")
        self.txt_inactive = QtWidgets.QLineEdit(self.centralwidget)
        self.txt_inactive.setGeometry(QtCore.QRect(280, 260, 41, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.txt_inactive.setFont(font)
        self.txt_inactive.setObjectName("txt_inactive")
        self.lb_count = QtWidgets.QLabel(self.centralwidget)
        self.lb_count.setGeometry(QtCore.QRect(80, 290, 191, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lb_count.setFont(font)
        self.lb_count.setObjectName("lb_count")
        self.txt_count = QtWidgets.QLineEdit(self.centralwidget)
        self.txt_count.setGeometry(QtCore.QRect(280, 290, 41, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.txt_count.setFont(font)
        self.txt_count.setObjectName("txt_count")
        self.lb_limit = QtWidgets.QLabel(self.centralwidget)
        self.lb_limit.setGeometry(QtCore.QRect(350, 230, 101, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lb_limit.setFont(font)
        self.lb_limit.setObjectName("lb_limit")
        self.txt_limit = QtWidgets.QLineEdit(self.centralwidget)
        self.txt_limit.setGeometry(QtCore.QRect(450, 230, 151, 22))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.txt_limit.setFont(font)
        self.txt_limit.setObjectName("txt_limit")
        self.lb_revolving = QtWidgets.QLabel(self.centralwidget)
        self.lb_revolving.setGeometry(QtCore.QRect(80, 320, 161, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lb_revolving.setFont(font)
        self.lb_revolving.setObjectName("lb_revolving")
        self.txt_revolving = QtWidgets.QLineEdit(self.centralwidget)
        self.txt_revolving.setGeometry(QtCore.QRect(240, 320, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.txt_revolving.setFont(font)
        self.txt_revolving.setObjectName("txt_revolving")
        self.lb_avg = QtWidgets.QLabel(self.centralwidget)
        self.lb_avg.setGeometry(QtCore.QRect(350, 260, 151, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lb_avg.setFont(font)
        self.lb_avg.setObjectName("lb_avg")
        self.txt_avg = QtWidgets.QLineEdit(self.centralwidget)
        self.txt_avg.setGeometry(QtCore.QRect(500, 260, 151, 22))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.txt_avg.setFont(font)
        self.txt_avg.setObjectName("txt_avg")
        self.lb_amt = QtWidgets.QLabel(self.centralwidget)
        self.lb_amt.setGeometry(QtCore.QRect(350, 290, 191, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lb_amt.setFont(font)
        self.lb_amt.setObjectName("lb_amt")
        self.txt_amt = QtWidgets.QLineEdit(self.centralwidget)
        self.txt_amt.setGeometry(QtCore.QRect(550, 290, 151, 22))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.txt_amt.setFont(font)
        self.txt_amt.setObjectName("txt_amt")
        self.txt_trans = QtWidgets.QLineEdit(self.centralwidget)
        self.txt_trans.setGeometry(QtCore.QRect(490, 320, 151, 22))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.txt_trans.setFont(font)
        self.txt_trans.setText("")
        self.txt_trans.setObjectName("txt_trans")
        self.lb_trans = QtWidgets.QLabel(self.centralwidget)
        self.lb_trans.setGeometry(QtCore.QRect(350, 320, 191, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lb_trans.setFont(font)
        self.lb_trans.setObjectName("lb_trans")
        self.txt_transCt = QtWidgets.QLineEdit(self.centralwidget)
        self.txt_transCt.setGeometry(QtCore.QRect(240, 350, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.txt_transCt.setFont(font)
        self.txt_transCt.setText("")
        self.txt_transCt.setObjectName("txt_transCt")
        self.lb_transCt = QtWidgets.QLabel(self.centralwidget)
        self.lb_transCt.setGeometry(QtCore.QRect(80, 350, 161, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lb_transCt.setFont(font)
        self.lb_transCt.setObjectName("lb_transCt")
        self.txt_chng = QtWidgets.QLineEdit(self.centralwidget)
        self.txt_chng.setGeometry(QtCore.QRect(530, 350, 151, 22))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.txt_chng.setFont(font)
        self.txt_chng.setObjectName("txt_chng")
        self.lb_chng = QtWidgets.QLabel(self.centralwidget)
        self.lb_chng.setGeometry(QtCore.QRect(350, 350, 191, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lb_chng.setFont(font)
        self.lb_chng.setObjectName("lb_chng")
        self.txt_avg_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.txt_avg_2.setGeometry(QtCore.QRect(260, 380, 151, 22))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.txt_avg_2.setFont(font)
        self.txt_avg_2.setObjectName("txt_avg_2")
        self.lb_avg_2 = QtWidgets.QLabel(self.centralwidget)
        self.lb_avg_2.setGeometry(QtCore.QRect(80, 380, 191, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lb_avg_2.setFont(font)
        self.lb_avg_2.setObjectName("lb_avg_2")
        self.txt_predizer = QtWidgets.QLineEdit(self.centralwidget)
        self.txt_predizer.setGeometry(QtCore.QRect(170, 530, 771, 22))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.txt_predizer.setFont(font)
        self.txt_predizer.setObjectName("txt_predizer")
        self.lb_predizer = QtWidgets.QLabel(self.centralwidget)
        self.lb_predizer.setGeometry(QtCore.QRect(80, 530, 81, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lb_predizer.setFont(font)
        self.lb_predizer.setObjectName("lb_predizer")
        self.lb_predicao = QtWidgets.QLabel(self.centralwidget)
        self.lb_predicao.setGeometry(QtCore.QRect(290, 30, 491, 71))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI Semilight")
        font.setPointSize(36)
        self.lb_predicao.setFont(font)
        self.lb_predicao.setObjectName("lb_predicao")
        self.bt_predizer = QtWidgets.QPushButton(self.centralwidget)
        self.bt_predizer.setGeometry(QtCore.QRect(420, 450, 141, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.bt_predizer.setFont(font)
        self.bt_predizer.setObjectName("bt_predizer")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1018, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.lb_age.setText(_translate("MainWindow", "Customer_Age:"))
        self.lb_gender.setText(_translate("MainWindow", "Gender:"))
        self.gender_m.setText(_translate("MainWindow", "M"))
        self.gender_f.setText(_translate("MainWindow", "F"))
        self.lb_dependent.setText(_translate("MainWindow", "Dependent_count:"))
        self.lb_level.setText(_translate("MainWindow", "Education_Level:"))
        self.lb_marital.setText(_translate("MainWindow", "Marital_Status:"))
        self.lb_income.setText(_translate("MainWindow", "Income_Category:"))
        self.rb_income_1.setText(_translate("MainWindow", "Less than $40K"))
        self.rb_income_2.setText(_translate("MainWindow", "$40K - $60K"))
        self.rb_income_3.setText(_translate("MainWindow", "$60K - $80K"))
        self.rb_income_4.setText(_translate("MainWindow", "$80K - $120K"))
        self.rb_income_5.setText(_translate("MainWindow", "$120K +"))
        self.lb_category.setText(_translate("MainWindow", "Card_Category:"))
        self.lb_book.setText(_translate("MainWindow", "Months_on_book:"))
        self.lb_relationship.setText(_translate("MainWindow", "Total_Relationship_Count:"))
        self.lb_inactive.setText(_translate("MainWindow", "Months_Inactive_12_mon:"))
        self.lb_count.setText(_translate("MainWindow", "Contacts_Count_12_mon:"))
        self.lb_limit.setText(_translate("MainWindow", "Credit_Limit:"))
        self.lb_revolving.setText(_translate("MainWindow", "Total_Revolving_Bal:"))
        self.lb_avg.setText(_translate("MainWindow", "Avg_Open_To_Buy:"))
        self.lb_amt.setText(_translate("MainWindow", "Total_Amt_Chng_Q4_Q1:"))
        self.lb_trans.setText(_translate("MainWindow", "Total_Trans_Amt:"))
        self.lb_transCt.setText(_translate("MainWindow", "Total_Trans_Ct:"))
        self.lb_chng.setText(_translate("MainWindow", "Total_Ct_Chng_Q4_Q1:"))
        self.lb_avg_2.setText(_translate("MainWindow", "Avg_Utilization_Ratio:"))
        self.lb_predizer.setText(_translate("MainWindow", "Resultado:"))
        self.lb_predicao.setText(_translate("MainWindow", "PREDIÇÃO DE CLIENTE"))
        self.bt_predizer.setText(_translate("MainWindow", "PREDIZER"))

        self.bt_predizer.clicked.connect(self.predizer)
    def predizer(self):
        age = int(self.txt_age.text())
        if self.rb_income_1.isChecked() == True:
           income = 'Less than $40K'
        elif self.rb_income_2.isChecked() == True:
            income = '$40K - $60K'
        elif self.rb_income_3.isChecked() == True:
             income = '$60K - $80K'
        elif self.rb_income_4.isChecked() == True:
             income = '$80K - $120K'
        elif self.rb_income_5.isChecked() == True:
             income = '$120K +'
        Dependent_count = int(self.txt_dependent.text())
        Education_Level = str(self.txt_level.text())
        Marital_Status = str(self.txt_marital.text())
        Card_Category = str(self.txt_category.text())
        Months_on_book = int(self.txt_book.text())
        Total_Relationship_Count = int(self.txt_relationship.text())
        Months_Inactive_12_mon = int(self.txt_inactive.text())
        Contacts_Count_12_mon = int(self.txt_count.text())
        Credit_Limit = float(self.txt_limit.text())
        Total_Revolving_Bal = int(self.txt_revolving.text())
        Avg_Open_To_Buy = float(self.txt_avg.text())
        Total_Amt_Chng_Q4_Q1 = float(self.txt_amt.text())
        Total_Trans_Amt = int(self.txt_trans.text())
        Total_Trans_Ct = int(self.txt_transCt.text())
        Total_Ct_Chng_Q4_Q1 = float(self.txt_chng.text())
        Avg_Utilization_Ratio = float(self.txt_avg_2.text())
        if self.gender_f.isChecked() == True:
            gender = 'F'
        elif self.gender_m.isChecked() == True:
            gender = 'M'
        dados = {'Customer_Age':[age],
                'Gender':[gender],
                'Dependent_count': [Dependent_count],
                'Education_Level': [Education_Level],
                'Marital_Status': [Marital_Status],
                'Income_Category': [income],
                'Card_Category': [Card_Category],
                'Months_on_book': [Months_on_book],
                'Total_Relationship_Count': [Total_Relationship_Count],
                'Months_Inactive_12_mon': [Months_Inactive_12_mon],
                'Contacts_Count_12_mon': [Contacts_Count_12_mon],
                'Credit_Limit': [Credit_Limit],
                'Total_Revolving_Bal':[Total_Revolving_Bal],
                'Avg_Open_To_Buy': [Avg_Open_To_Buy],
                'Total_Amt_Chng_Q4_Q1': [Total_Amt_Chng_Q4_Q1],
                'Total_Trans_Amt': [Total_Trans_Amt],
                'Total_Trans_Ct':[Total_Trans_Ct],
                'Total_Ct_Chng_Q4_Q1': [Total_Ct_Chng_Q4_Q1],
                'Avg_Utilization_Ratio': [Avg_Utilization_Ratio]}

        # Transformando em um dataframe os dados
        df = pd.DataFrame(dados)
        # colocando no csv
        df.to_csv('novoCliente.csv', index = False, header = True)
        # lendo o csv criado
        novoCliente =pd.read_csv('novoCliente.csv')
        # ajutando os dados
        creditcard = pd.read_csv('BankChurners.csv')
        creditcard.drop(['Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1',
                        'Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2'], axis=1, inplace=True)
        creditcard.drop(['CLIENTNUM'], axis=1, inplace=True)
        # Precisamos transformar Clientes Existente em 0 e Clientes Desligado em 1
        creditcard['Attrition_Flag'].replace(('Existing Customer','Attrited Customer'), (0,1), inplace=True)
        # Vamos renomear a coluna para usuario
        creditcard.rename(columns={'Attrition_Flag':'Usuario'}, inplace=True)
        
        novoCliente = novoCliente.append(creditcard, ignore_index=True)


        # Divisão entre previsores e classe da nova base de dados
        # define x e y
        X = novoCliente.drop('Usuario', axis = 1).values
        y = novoCliente['Usuario'].values
    
        # LabelEncoder
        label_encoder_education_Level = LabelEncoder()
        label_encoder_income_Category = LabelEncoder()
        label_encoder_gender = LabelEncoder()
        label_encoder_marital_Status = LabelEncoder()
        label_encoder_card_Category = LabelEncoder()

        X[:,1] = label_encoder_gender.fit_transform(X[:,1])
        X[:,3] = label_encoder_education_Level.fit_transform(X[:,3])
        X[:,4] = label_encoder_marital_Status.fit_transform(X[:,4])
        X[:,5] = label_encoder_income_Category.fit_transform(X[:,5])
        X[:,6] = label_encoder_card_Category.fit_transform(X[:,6])

        # OneHotEncoder
        onehotencoder = ColumnTransformer(transformers=[('OneHot', OneHotEncoder(), [1,3,4,5,6])], remainder='passthrough')
        X=onehotencoder.fit_transform(X)

        # Escalonamento dos valores
        scaler = StandardScaler()
        X = scaler.fit_transform(X)
        
        # Divisão das bases em treinamento e teste
        #treinar divisão de teste
        # stratify = y preserva a proporção do alvo como no conjunto de dados original nos conjuntos de dados de treinamento e teste
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.15, random_state=0)
        
        # Rejeição de classificadores

        forest = pickle.load(open('classificador_randomForest.sav', 'rb'))
        arvore = pickle.load(open('classificador_arvoreDecisao.sav', 'rb'))
        naive = pickle.load(open('classificador_naiveBayes.sav', 'rb'))


        novo_registro = X[0]
        novo_registro = novo_registro.reshape(1, -1)
        novo_registro, novo_registro.shape

        resposta_forest = forest.predict(novo_registro)
        resposta_arvore = arvore.predict(novo_registro)
        resposta_naive = naive.predict(novo_registro)

        probabilidade_forest = forest.predict_proba(novo_registro)
        confianca_forest = probabilidade_forest.max()
        probabilidade_arvore = arvore.predict_proba(novo_registro)
        confianca_arvore = probabilidade_arvore.max()

        probabilidade_naive = naive.predict_proba(novo_registro)
        confianca_naive = probabilidade_naive.max()

        ativo = 0
        nao_ativo = 0
        confianca_minima = 0.999999
        algoritmos = 0

        if confianca_forest >= confianca_minima:
            algoritmos += 1
        if resposta_forest[0] == 1:
            nao_ativo += 1
        else:
            ativo += 1

        if confianca_arvore >= confianca_minima:
            algoritmos += 1
        if resposta_arvore[0] == 1:
            nao_ativo += 1
        else:
            ativo += 1

        if confianca_naive >= confianca_minima:
            algoritmos += 1
        if resposta_naive[0] == 1:
            nao_ativo += 1
        else:
            ativo += 1
        trans = str(algoritmos)
        if ativo > nao_ativo:
            predizer ='Cliente permanecerá ativo, baseado em ' + trans + ' algoritmos'
            self.txt_predizer.setText(predizer)
        elif ativo == nao_ativo:
            predizer = 'Empate, baseado em ' + trans + ' algoritmos'
            self.txt_predizer.setText(predizer)
        else:
            predizer = 'Cliente não permanecerá ativo, baseado em ' + trans + ' algoritmos'
            self.txt_predizer.setText(predizer)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
